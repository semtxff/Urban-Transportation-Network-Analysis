# I Description Of Project
This project challenges us to develop a transportation network analysis system. The goal is to model an urban area's bus transportation system using graphs, with stops as nodes and routes as edges. This model will help analyze and improve route efficiency and predict travel times.
# II Requirement Analysis of Project
## Data loading and modeling
Load data: The system can load bus stop and route data from external files (such as CSV format), including station ID, name, latitude and longitude, area type and other information.
Build a network model: Automatically build a graph model of the bus network based on the loaded station and route data. Nodes in the figure represent bus stops, and edges represent direct route connections between different stops. Each node records its location, site name, and connection relationship between neighboring nodes.
## Route analysis and optimization
Shortest Path calculation: Provides the ability to calculate the shortest path between two specified stations to help passengers or system planners find the best route to travel.
Route efficiency analysis: Analyze the operating efficiency of each route, including route length, ride time, number of stops and other indicators, in order to evaluate and optimize the transportation efficiency of existing routes.
## Peak hour traffic analysis
Traffic prediction: To predict the running time of buses during peak hours, take into account congestion factors and stop time, and provide passengers with more accurate travel information and advice.
Visualization and interactive features
Map display: The constructed bus network map is displayed in map form, and the map library (such as Folium) is used to achieve visualization effect, so that users can intuitively understand and operate the structure and information of the bus network.
User interface: Build an intuitive and friendly user interface (UI) to provide functions such as adding stations, deleting stations, and revoking operations, so that users can easily modify and manage bus network data.
## Technical implementation requirements
Programming language and library: Using Python as the main programming language, combined with graph theory library (such as NetworkX) to realize the modeling and analysis function of public transport network; Use GUI library (such as PyQt5) to design and implement the interactive interface; Map visualization using Folium library.
Data processing: data loading, processing and storage functions are implemented to ensure that the system can handle large-scale bus data sets.
Performance and stability: The system should have good performance and stability, be able to respond quickly to user operations, and be able to handle complex bus network analysis tasks.
Application scenario and significance
The main application scenarios of this system include but are not limited to:
Bus route planning and optimization: Providing decision support to urban transport managers and planners.
Public travel guidance: To provide passengers with real-time optimal travel route and ride time prediction.
Data analysis and decision support: Through the data analysis of the bus network, it helps decision makers to optimize the operating efficiency of the public transport system and improve the level of urban transport services.
# III Design of Project 
In this section, I'll walk you through the code we used to implement the project.
## plt_graph.py
First, in plt_graph.py, we use the libraries' Pandas' and 'Matplotlib' to process urban traffic network data. First, load the site and route data via the 'load_stops_df(filename)' and 'load_routes_df(filename)' functions, reading from the specified CSV file respectively and returning 'Pandas DataFrame'. Then, the create_graph(stops_df, routes_df) function creates a directed graph where each site is represented by its unique stop_id, including location information (pos), Latitude and longitude tuple), name (' name '), out_degree (' out_degree '), and in_degree (' in_degree '). Next, the plot_transport_network(graph) function uses Matplotlib to draw a visual picture of the urban transport network, displaying each site as a scatter point, showing the routes and distances between the sites. The purpose of this code is to analyze and demonstrate the structure and connectivity of the urban transportation network.
##  find_routes.py
In find_routes.py, we implement a path lookup function based on depth-first search (DFS) algorithm. First, import 'routes_df' data from the project root as the base data for the roadmap. Then, a pop-up dialog box is used to get the user's input starting and ending stations, respectively. Using these inputs, the program builds a directed graph and uses depth-first search (DFS) to recursively find all possible paths from the origin station to the final station and prints them out. This code is suitable for application scenarios that require path search and analysis based on given traffic network data, providing interactive input and output methods.
## find_highest_centrality.py
In find_highest_centrality.py, this code aims to find the station with the highest centrality (the sum of the total degrees, i.e. the sum of the degrees out and in) from the given digraph 'G'. By traversing each node in the graph and calculating its total degree, the node with the largest total degree and its related information are finally determined. The function 'print_highest_cretrality' prints out the name, identification, and number of connections of the station with the highest total number of degrees, and outputs a prompt if no connected node is found. This code is suitable for analyzing and displaying the most critical and busy traffic nodes in the urban transportation network, and provides a typical example for the network centrality analysis in the experimental report.
## ime_predict.py
In time_predict.py, we implement a traffic network model. First, create_graph is used to construct a digraph G based on the given site and route data, where each node represents a site and the edge represents the path and distance between the sites. Then, the calculate_travel_time function is defined to calculate the travel time between two stations, taking into account the influence of the distance and the type of start and end stations on the travel time. Then, use the 'find_all_paths' function to find all possible paths between the specified start and end points, and the 'calculate_paths_travel_time' function to calculate the total travel time for each path. Finally, in the 'print_time_predict' function, all the paths and their estimated travel time are printed by calling the aforementioned function. This code is suitable for showing the construction process of traffic network analysis model and the realization method of route travel time prediction in the experimental report.
##  shortest_path.py
In shortest_path.py, this code implements Dijkstra's algorithm to calculate the shortest path between two points in a weighted directed graph. First, a weighted digraph 'graph' is built from the 'routes_df' data box using the 'create_graph' function, where each node represents a site and edges represent routes and distances between sites. Then, the 'dijkstra' function is used to perform a shortest path search on this graph, from the specified starting point to the end point, to find the shortest path and calculate the total distance of the path. Finally, the result is printed out via the 'print_shortest_path' function, showing the shortest path from the start to the end and its total distance. The main function of this code is to provide the path planning function for the traffic network management system, which helps users quickly find the best driving route between two stations by calculating the shortest path and the total distance.
## route_efficiency.py
In route_efficiency.py, this code implements three key functions in the path planning system. First, two types of graphs are constructed using the create_graph and create_weighted_graph functions, respectively: an unweighted stop chart and a weighted road map. Secondly, Dijkstra algorithm (' dijkstra 'function) is used to find the shortest path between two points in the weighted graph, and the total distance of the path is calculated. Finally, the route_efficiency_analysis function was used to analyze the path efficiency to find the most efficient path and compare its relationship with the shortest path. How this code combines stop data and route data to build a graphical structure to represent the traffic network. Dijkstra algorithm is used to calculate the shortest path effectively, and the optimal path is found through the path efficiency analysis. These functions not only provide the basic capability of path planning, but also allow the system to evaluate the efficiency and total distance of different paths at a given start and end point to provide the best travel recommendations for the user.
## interactive_Site_Map.py
In interactive_Site_Map.py, we used Pandas and Folium libraries to create an interactive map. First, a CSV file containing the site information of the city's transport network is loaded through Pandas' read_csv 'method. Then, using Folium, a map is created with a center point set to the average of the latitude and longitude of all sites and an initial zoom level of 13. Next, the location of each site is added as a marked point on the map by iterating over each row in the data box. Each tag includes the name of the site as the title of the popup, the area type of the site as the content of the popup, and displays the name of the site as a tooltip when the mouse hovers. Finally, the map is saved locally in the form of an HTML file, and the success of the saving is confirmed by printing a message. The purpose of this code is to visualize the urban traffic network site on the map, so as to intuitively understand and analyze the distribution of the site and its attributes, which is suitable for displaying the spatial distribution and site characteristics of the urban traffic network in the experimental report.
## Peak_Hours_Traffic_Analysis.py
In Peak_Hours_Traffic_Analysis.py, this code implements a functional module for traffic network analysis. First, the site and routing data is transformed into a graphical representation using the 'create_graph' function, where each site and the connection distance between them are recorded. The analyze_peak_hours_traffic function then calculates the optimized routing information during peak hours based on congestion factors and site latency, and returns an optimized routing data box. Next, with the depth-first search algorithm 'dfs_find_all_paths' and 'find_all_paths' functions, all possible paths between the two sites can be found. After the path is determined, the 'calculate_path_time' function calculates the travel time of each path in the optimized routing data frame. Finally, the 'print_peak_hour_route_between_stops' function finds the fastest path during rush hours and outputs information about the path and its travel time. The purpose of this code is to provide a complete traffic network analysis function module for the experimental report, which can process the station data, routing data, calculate the optimal path and the path travel time, and output the best path information or the tip of the path not found.
## GUI.py
In GUI.py, this code implements a graphical interface program for a traffic network management system, based on PyQt5 and Folium libraries. The program loads bus stop and route data by reading CSV files, users can add and delete stops on the map, and use depth-first search and Dijkstra algorithm to find and display routes between stops. The interface provides function buttons such as add site, delete site, undo delete, display route, etc., and can draw multiple possible paths and the shortest path on the map. The overall design makes full use of the combination of data structure, algorithm and graphical interface, and shows the practical application of urban bus network analysis and optimization.
## Bus_Stop_Utilization_Analysis.py
In Bus_Stop_Utilization_Analysis.py, this code analyzes the utilization_of an urban transportation network station and recommends new stations. First, the station information is loaded by reading a data file named "urban_transport_network_stops.csv" and the number of passengers for each station is randomly generated. Based on the set utilization threshold (75 in this case), the analyze_stop_utilization function identifies underutilized stations where the number of passengers is below the threshold and returns the data frame of these stations. The 'recommend_new_stops' function acts as a placeholder for the recommendation algorithm and currently only copies the entered site data boxes as an example. The 'print_underutilized_stops' function performs utilization analysis and prints out information about the underutilized sites identified. The 'print_recommended_stops' function calls the recommended_stops function and prints out the recommended-site information. Overall, this code shows how to perform a simple utilization analysis and recommendation algorithm framework based on site data to optimize the site layout and service efficiency of the urban transportation network.
## windows.py
In windows.py, our code implements a PyQT5-based graphical user interface (GUI) for a traffic network analysis tool. The main functions include calling different traffic network analysis functions by buttons, such as drawing network map, finding path, calculating maximum centrality, time prediction, shortest path, route efficiency analysis, peak hour traffic analysis, bus stop utilization analysis, etc. After each button is clicked, the result of the function execution is captured by redirecting the standard output and the output is displayed in the message box. Also included is the ability to open another TrafficNetworkGUI function button and reset the node. The overall code structure is clear, and the GUI layout and interaction logic are realized by inheriting the QtWidgets.QWidget class. The signal-slot mechanism provided by PyQt5 is used to deal with button click events, so that users can easily analyze and visualize the traffic network.
# IV Implementation of Project
## start
![alt text](微信图片_20240704162133.png)
![alt text](微信图片_20240704162139.png)
![alt text](微信图片_20240704162148.png)
## Plot Graph
![alt text](微信图片_20240704162155.png)
## Find Routes
![alt text](微信图片_20240704162204.png)
## Find Highest Centrality
![alt text](微信图片_20240704162211.png)
## Time Predict
![alt text](微信图片_20240704162218.png)
## Shortest Path
![alt text](微信图片_20240704162225.png)
## Route Efficiency
![alt text](微信图片_20240704162232.png)
## Peak Hours Traffic Analysis
![alt text](微信图片_20240704162239.png)
## Bus Stop Utilization Analysis
![alt text](微信图片_20240704162246.png)
## Traffic Network GUI
![alt text](微信图片_20240704162253.png)
![alt text](微信图片_20240704162301.png)
![alt text](微信图片_20240704162309.png)
## If you enter a site that does not exist
![alt text](微信图片_20240704162317.png)
# V Running and Debugging of Project
In this section, I'll walk you through our project run debug code one by one
## test_plt_graph.py
In test_plt_graph.py, this code uses Python's unittest module to test a simple urban traffic network analysis tool. Firstly, the accuracy of data loading functions' load_stops_df 'and' load_routes_df 'is tested by simulating the site and route data. Then, using the test data, we verify that create_graph function can construct the directed graph correctly, and verify the connection relationship and distance between sites. Finally, the plot_transport_network function is tested to ensure that the visual image of the urban traffic network can be correctly drawn. These tests ensure the correctness and reliability of the code when processing and presenting data from urban transportation networks.
##  test_find_routes.py
In test_find_routes.py, we use Python's unittest module to test the pathfinding capabilities of the depth-first search (DFS) algorithm. In the test, the 'input' function is simulated with 'unittest.mock.patch' to test path lookups from the origin and destination of user input. The 'dfs' function in the test recursively finds all possible paths from the starting point to the ending point in a given graph and prints out the result. By capturing the output of 'sys.stdout', the test ensures that the path finding is correct and that the output contains the expected path information. This code is suitable for testing the correctness and stability of the path finding algorithm in different situations, and is a good example to show the algorithm testing method in the experiment report.
## test_find_highest_centrality.py
In test_find_highest_centrality.py, we use Python's unittest module for testing, which mainly verifies the function of finding the most centralized node in the network. In the method test_find_highest_centrality, we test whether the find_highest_centrality function can correctly identify and return the node with the highest centrality and the corresponding total degree through the test graph test_graph. In the test_print_highest_cretrality method, the output of the print function is simulated by unittest.mock.patch. It verifies whether the function 'print_highest_cretrality' can correctly print the information of the node with the highest centrality in the given graph 'G'. This code is suitable for showing how to test and verify the accuracy of the centrality algorithm and the correctness of the output results in the network analysis, and is an example of the test method in the experiment report.
## test_time_predict.py
In test_time_predict.py, this code implements the ability to unit test the traffic network model. First, in the 'setUp' method, we create a DataFrame for the site and route using the test data, and call the 'create_graph' function to build a directed graph. In the test method, 'create_graph', 'calculate_travel_time', 'find_all_paths', and 'calculate_paths_travel_time' are unit tested. In test_create_graph, we verify that the create_graph function correctly constructs the graph structure based on site and route data, and check that the properties of each node and edge in the graph are as expected. In the 'test_calculate_travel_time', I tested the 'calculate_travel_time' function to ensure that it correctly calculates the travel time between two sites, taking into account the impact of distance traveled and the type of start and end stations on the travel time. In the 'test_find_all_paths', we verify that the 'find_all_paths' function can find all possible paths between the specified start and end point, and ensure that the list of paths returned is consistent with the expected result. Finally, in test_calculate_paths_travel_time, I tested the 'calculate_paths_travel_time' function to ensure that it can calculate the total travel time for each path based on the given list of paths and compare it to the expected result. Through these unit tests, we can effectively verify the correctness and stability of the key functions in the traffic network model, so as to ensure the reliability and accuracy of the model in practical application.
## test_shortest_path.py
In test_shortest_path.py, our code implements unit testing of key functions in the path planning system. First, we test the functionality of the dijkstra function using the test_dijkstra_functionality method to ensure that it can correctly calculate the shortest path between two points in a weighted directed graph and return the list of paths and the total distance. Second, the correct use of the priority queue heapq in the code is verified by the method test_heapq_usage, including ensuring that the distance value is handled using the np.float64 type in numpy. Finally, we check whether the routes_df data box is loaded correctly by the test_routes_dataframe method and verify that it contains the necessary columns (start_stop_id, end_stop_id, distance). And whether the data type for the distance column is' np.float64 '. These unit tests ensure the functional correctness of key components and the accuracy of data processing in the path planning system, and provide protection for the robustness of the system.
##  test_route_efficient.py
In test_route_efficient.py, this code tests the path efficiency module using the unittest framework. Firstly, through the 'setUp' method, the stopping data and route data required by the test are set up, including the location information and area type of the stop, as well as the start stop, end stop and distance information of the route respectively. Then, create_graph and calculate_travel_time in the path efficiency module are tested by two test methods: test_create_graph and test_calculate_travel_time The function was tested. In test_create_graph, we build a graph structure by calling the create_graph function and verify that the graph contains the specified stop information, such as the stop name and area type. In 'test_calculate_travel_time', the travel time from one stop to another is calculated by calling the 'calculate_travel_time' function, and the accuracy of the calculation is verified using the 'assertAlmostEqual' method. These tests ensure the correctness of key functions in the path efficiency module, including data processing and algorithm calculation. In the lab report, you can briefly describe how this code validates the functionality of the path efficiency module through unit tests and ensures its expected behavior and results under different input conditions.
##  test_interactive_Site_Map.py
In test_interactive_Site_Map.py, this code uses the unittest framework and the unittest.mock module to test the interactive sitemap-generating function add_map. First, calls to the functions' pandas.read_csv ', 'folium.Map.save' and 'builtins.print' are simulated through the 'patch' decorator. In the test method 'test_add_map', we create a mock data box 'mock_data' that contains the latitude and longitude, name, and area type information for the site. Use 'mock_read_csv.return_value' to set the simulated data box to the return value of the 'read_csv' function to simulate loading data from a CSV file. Next, call the 'add_map' function to generate the map, and use the 'assert_called_once_with' method to verify that the function calls the 'read_csv', 'save' and 'print' functions as expected, with the correct parameters passed in. The purpose of this test code is to ensure that the 'add_map' function loads the data correctly, generates the map, saves the map as an HTML file, and outputs the correct confirmation message when the operation is successful. Such tests are suitable for lab reports showing how unit tests can be used to verify the correctness and reliability of interactive sitemap generation.
## test_Peak_Hours_Traffic_Analysis.py
In test_Peak_Hours_Traffic_Analysis.py, we implement a unit testing framework for rush-hour traffic analysis. First, the 'create_graph' function transforms the site data and routing data into a graphical structure for subsequent path analysis. The 'analyze_peak_hours_traffic' function then calculates the optimized routing data, including increased distance and travel time, based on the set congestion factors and site delays. In the unit test, the 'test_create_graph' test ensures that the 'create_graph' function builds the graph structure correctly and compares it to the expected graph. The 'test_analyze_peak_hours_traffic' test verifies that the analyze_peak_hours_traffic function correctly generates the optimized path data frame and compares it with the expected result. 'test_find_all_paths' and 'test_calculate_path_time' test the accuracy of the path finding and path time calculation functions, respectively. Overall, this code provides a comprehensive test of the traffic network analysis function module to ensure its correctness and reliability under different data input situations.
## test_Bus_Stop_Utilization_Analysis.py
In test_Bus_Stop_Utilization_Analysis.py, we implement a unit test for analyzing bus station utilization and recommending new stations. In the preparation phase before the test (the 'setUp' method), the passenger traffic of different stations was simulated by creating a virtual data box containing the station ID and the number of passengers. The 'test_analyze_stop_utilization' method tests the 'analyze_stop_utilization' function, which identifies underutilized sites with fewer passengers than the threshold based on a preset utilization threshold (75 in this case). The results are compared with the expected results. The 'test_recommend_new_stops' method tested the' recommend_new_stops' function, which currently only copies the entered site data box as an example recommendation. The correctness of the function is verified by using the assertion method 'pd.testing.assert_frame_equal' to ensure that the data frame returned by the function is consistent with the expected result. Overall, this code shows how to validate the bus stop utilization analysis and recommendation function using the unittest framework 'unittest' to ensure its expected behavior and results under different input conditions.
# VI Summary
## 6.1 Daily Work Schedule
|25th   June |26th-30th June  |1th-3thJuly  | 4thJuly | 5thJuly |
|-------|-------|-------|-------|-------|
|Understand the experimental project, download the required software, and complete the experimental division  |In the past few days, we have completed the preliminary project design, consulted the teacher a lot about the problems we could not solve, and made an interim report. However, the nx library we used before (NetworkX) did not meet the requirements, so we had to complete it by ourselves, so we had to rewrite a lot of code  |We modified the code in the correct way and completed it, during which time we asked the teacher many questions about the wrong questions  |Write reports and design ppt  | Conduct experimental report and demonstration |
## 6.2 Division of Labor within the Group
Bihan Hou: Write Peak_Hours_Traffic_Analysis, Bus_Stop_Utilization_Analysis function code, translation code
Minghao Li: Write time_predict, route_effciency, test coverage, GUI, main function code
Haodong Yang: Write find_highest_centrality, shortest_path, GUI, main function code
Xinyue He: Write plt_graph, find_routes function code, write PPT and speech report
Haihan Tang: Write Test function code
## 6.3 Tips
### Bihan Hou
I knew the importance of efficient transportation networks in urban planning and keys of concepts in transportation analysis. The development environment we used is Visual Studio Code. We applying the algorithms to find optimal routes in the network, analyzing and visualizing traffic patterns during peak hours and integrating data analysis and visualization into the GUI. By using VS Code and popular Python libraries, I got hands-on experience in setting up a development environment, coding, and debugging. The development of a GUI and interactive features adds an engaging aspect to the learning process, making it more enjoyable and insightful. We gained practical skills in data analysis, which are valuable in many tech and urban planning careers.Overall, the course is an excellent resource, we work together to mix theoretical knowledge and practical skills that are directly applicable to real-world problems.
### Xinyue He
This participation in the urban transportation network analysis project made me deeply understand the indispensable importance of data structure and algorithm in optimizing urban public transportation system. By designing and implementing station classes, building efficient adjacency lists represented by directed graphs, and developing routing algorithms, I not only improved significantly in my coding skills, but also learned how to predict travel times and find optimal routes by analyzing large amounts of real data. In addition, designing and implementing user-friendly graphical interfaces and additional features, such as traffic analysis during peak hours, make me better at solving complex urban planning problems in real life. In the process of the project, I met many challenges and problems, but thanks to the support and help of teachers and team members, I learned how to overcome difficulties in cooperation, and gained more growth and experience. This experience not only enhanced my problem-solving skills, but also greatly improved my teamwork skills and communication skills. Looking forward to more similar learning opportunities in the future!
### Haodong Yang
In this course, I was responsible for drawing part of ToolBox, shortest path part and interactive map, and this project made me deeply realize the importance of different data structures in expressing urban public transportation data.Through this writing code, I know how to correctly import functions from other files to implement functions; I learned how to iterate over functions on github in order to see the differences between each version; In the shortest_path file, I learned how to create dijkstra functions; In the GUI file, I learned how to divide the map into different elements (such as site markers and path lines) and divide them into different layers. I also help other students in the group to solve some difficulties or provide ideas.By learning this course, I not only improved my coding ability, but also improved our team work ability. This topic is a good team work topic, everyone has their own job to do. Finally, it is combined into a complete UI interface and all functions are placed on it, which is a workload that cannot be completed by one person. I realize the importance of team cooperation. I need to thank my team, and I also need to thank the teachers who come to our group every day to check our progress and whether we have any problems to solve. I hope there will be opportunities to learn such courses again in the future.
### Minghao Li
In this course, I was responsible for completing a project on urban transportation network analysis, which made me deeply realize the importance of different data structures in expressing urban public transportation data. By reading the csv files urban_transport.network_routes and urban_transport.network_stops, which are stored and called through different data structures, all routes between stations are found through recursive methods. The Dijkstra algorithm is used in planning and optimizing routes, which can accurately find the shortest route among all routes and plays an important role in optimizing urban public transportation systems. We also identified underutilized sites for potential deletion or consolidation, and recommended new sites in high demand areas to improve service coverage and efficiency. By studying this course, I not only improved my ability to write code, but also learned how to call functions to implement various functions. Finally, we developed a UI interface and presented all the features on it, which allowed us to better understand the logic between each feature. I deeply understand the importance of teamwork here. It is impossible for one person to complete these projects. I want to thank my team, and at the same time, I also want to thank all the teachers for their great help when I encountered problems that I could not solve. Thank you. I hope to have the opportunity to learn such courses in the future
### Haihan Tang
During my involvement in the urban transportation network analysis project, I had the privilege of taking on the crucial role of code testing. This experience has significantly enriched my understanding of the intricacies of software development and has undoubtedly refined my coding abilities.Utilizing unittest framework for code verification was not just a task; it was a journey of learning and growth. Each test case I crafted was a testament to my attention to detail and my commitment to ensuring the robustness and reliability of our project. This process compelled me to think critically about potential issues and edge cases, ultimately enhancing my problem-solving skills. As I delved deeper into testing, I realized how closely intertwined coding and testing are. The act of writing tests forced me to revisit my own code with a fresh perspective, identifying areas for improvement and optimization. This iterative approach not only strengthened my coding prowess but also instilled in me a sense of discipline and responsibility towards the quality of my work.Moreover, collaborating with the development team on identifying and fixing bugs was incredibly rewarding. It underscored the importance of teamwork and communication in software engineering. The support and guidance from my teachers and teammates were invaluable, as they helped me navigate through complex scenarios and encouraged me to keep pushing the boundaries of my capabilities. In conclusion, my role in code testing for this project has been a transformative experience. It has not only elevated my coding skills but also fostered in me a deeper appreciation for the importance of rigorous testing in software development. I am grateful for this opportunity and look forward to applying these learnings in my future endeavors.
     
## 6.4 Difficulties and Solution of Problems
In this experiment, the biggest difficulty we encountered was that after completing the preliminary project design, we found that the nx library (NetworkX) we used before did not meet the requirements, so we had to rewrite a lot of code, which was a very big challenge for us. Under the guidance of our teacher, we finally completed the redesign
